var documenterSearchIndex = {"docs":
[{"location":"literated/turbulent_advection-diffusion/","page":"Advection-diffusion of tracer by a turbulent flow","title":"Advection-diffusion of tracer by a turbulent flow","text":"EditURL = \"../../../examples/turbulent_advection-diffusion.jl\"","category":"page"},{"location":"literated/turbulent_advection-diffusion/#Advection-diffusion-of-tracer-by-a-turbulent-flow","page":"Advection-diffusion of tracer by a turbulent flow","title":"Advection-diffusion of tracer by a turbulent flow","text":"","category":"section"},{"location":"literated/turbulent_advection-diffusion/","page":"Advection-diffusion of tracer by a turbulent flow","title":"Advection-diffusion of tracer by a turbulent flow","text":"This is an example demonstrating the advection-diffusion of a tracer using a turbulent flow generated by the GeophysicalFlows.jl package.","category":"page"},{"location":"literated/turbulent_advection-diffusion/#Install-dependencies","page":"Advection-diffusion of tracer by a turbulent flow","title":"Install dependencies","text":"","category":"section"},{"location":"literated/turbulent_advection-diffusion/","page":"Advection-diffusion of tracer by a turbulent flow","title":"Advection-diffusion of tracer by a turbulent flow","text":"First let's make sure we have all the required packages installed.","category":"page"},{"location":"literated/turbulent_advection-diffusion/","page":"Advection-diffusion of tracer by a turbulent flow","title":"Advection-diffusion of tracer by a turbulent flow","text":"using Pkg\npkg.add([\"PassiveTracerFlows\", \"CairoMakie\", \"JLD2\"])","category":"page"},{"location":"literated/turbulent_advection-diffusion/#Let's-begin","page":"Advection-diffusion of tracer by a turbulent flow","title":"Let's begin","text":"","category":"section"},{"location":"literated/turbulent_advection-diffusion/","page":"Advection-diffusion of tracer by a turbulent flow","title":"Advection-diffusion of tracer by a turbulent flow","text":"First load packages needed to run this example.","category":"page"},{"location":"literated/turbulent_advection-diffusion/","page":"Advection-diffusion of tracer by a turbulent flow","title":"Advection-diffusion of tracer by a turbulent flow","text":"using PassiveTracerFlows, Printf, CairoMakie, JLD2\nusing Random: seed!","category":"page"},{"location":"literated/turbulent_advection-diffusion/#Choosing-a-device:-CPU-or-GPU","page":"Advection-diffusion of tracer by a turbulent flow","title":"Choosing a device: CPU or GPU","text":"","category":"section"},{"location":"literated/turbulent_advection-diffusion/","page":"Advection-diffusion of tracer by a turbulent flow","title":"Advection-diffusion of tracer by a turbulent flow","text":"dev = CPU()\nnothing # hide","category":"page"},{"location":"literated/turbulent_advection-diffusion/#Setting-up-a-MultiLayerQG.Problem-to-generate-a-turbulent-flow","page":"Advection-diffusion of tracer by a turbulent flow","title":"Setting up a MultiLayerQG.Problem to generate a turbulent flow","text":"","category":"section"},{"location":"literated/turbulent_advection-diffusion/","page":"Advection-diffusion of tracer by a turbulent flow","title":"Advection-diffusion of tracer by a turbulent flow","text":"The tubulent flow we use to advect the passive tracer is generated using the MultiLayerQG module from the GeophysicalFlows.jl package. A more detailed setup of this two layer system is found at the GeophysicalFlows Documentation.","category":"page"},{"location":"literated/turbulent_advection-diffusion/#Numerical-and-time-stepping-parameters-for-the-flow","page":"Advection-diffusion of tracer by a turbulent flow","title":"Numerical and time stepping parameters for the flow","text":"","category":"section"},{"location":"literated/turbulent_advection-diffusion/","page":"Advection-diffusion of tracer by a turbulent flow","title":"Advection-diffusion of tracer by a turbulent flow","text":"      n = 128            # 2D resolution = n²\nstepper = \"FilteredRK4\"  # timestepper\n     dt = 2.5e-3         # timestep\nnothing # hide","category":"page"},{"location":"literated/turbulent_advection-diffusion/#Physical-parameters","page":"Advection-diffusion of tracer by a turbulent flow","title":"Physical parameters","text":"","category":"section"},{"location":"literated/turbulent_advection-diffusion/","page":"Advection-diffusion of tracer by a turbulent flow","title":"Advection-diffusion of tracer by a turbulent flow","text":"L = 2π                   # domain size\nμ = 5e-2                 # bottom drag\nβ = 5                    # the y-gradient of planetary PV\n\nnlayers = 2              # number of layers\nf₀, g = 1, 1             # Coriolis parameter and gravitational constant\nH = [0.2, 0.8]           # the rest depths of each layer\nρ = [4.0, 5.0]           # the density of each layer\n\n U = zeros(nlayers)      # the imposed mean zonal flow in each layer\n U[1] = 1.0\n U[2] = 0.0\nnothing # hide","category":"page"},{"location":"literated/turbulent_advection-diffusion/#MultiLayerQG.Problem-setup,-shortcuts-and-initial-conditions","page":"Advection-diffusion of tracer by a turbulent flow","title":"MultiLayerQG.Problem setup, shortcuts and initial conditions","text":"","category":"section"},{"location":"literated/turbulent_advection-diffusion/","page":"Advection-diffusion of tracer by a turbulent flow","title":"Advection-diffusion of tracer by a turbulent flow","text":"MQGprob = MultiLayerQG.Problem(nlayers, dev;\n                               nx=n, Lx=L, f₀, g, H, ρ, U, μ, β,\n                               dt, stepper, aliased_fraction=0)\n\nnx, ny = MQGprob.grid.nx, MQGprob.grid.ny","category":"page"},{"location":"literated/turbulent_advection-diffusion/","page":"Advection-diffusion of tracer by a turbulent flow","title":"Advection-diffusion of tracer by a turbulent flow","text":"Initial conditions","category":"page"},{"location":"literated/turbulent_advection-diffusion/","page":"Advection-diffusion of tracer by a turbulent flow","title":"Advection-diffusion of tracer by a turbulent flow","text":"seed!(1234) # reset of the random number generator for reproducibility\nq₀  = 1e-2 * device_array(dev)(randn((nx, ny, nlayers)))\nq₀h = MQGprob.timestepper.filter .* rfft(q₀, (1, 2)) # apply rfft  only in dims=1, 2\nq₀  = irfft(q₀h, nx, (1, 2))                         # apply irfft only in dims=1, 2\n\nMultiLayerQG.set_q!(MQGprob, q₀)\nnothing # hide","category":"page"},{"location":"literated/turbulent_advection-diffusion/#Tracer-advection-diffusion-setup","page":"Advection-diffusion of tracer by a turbulent flow","title":"Tracer advection-diffusion setup","text":"","category":"section"},{"location":"literated/turbulent_advection-diffusion/","page":"Advection-diffusion of tracer by a turbulent flow","title":"Advection-diffusion of tracer by a turbulent flow","text":"Now that we have a MultiLayerQG.Problem setup to generate our turbulent flow, we setup an advection-diffusion simulation. This is done by passing the MultiLayerQG.Problem as an argument to TracerAdvectionDiffusion.Problem which sets up an advection-diffusion problem with same parameters where applicable and also on the same device (CPU/GPU). We also need to pass a value for the constant diffusivity κ, the stepper used to step the problem forward and when we want the tracer released into the flow. We let the flow evolve up to t = tracer_release_time and then release the tracer and let it evolve with the flow.","category":"page"},{"location":"literated/turbulent_advection-diffusion/","page":"Advection-diffusion of tracer by a turbulent flow","title":"Advection-diffusion of tracer by a turbulent flow","text":"κ = 0.002                        # constant diffusivity\nnsteps = 4000                    # total number of time-steps\ntracer_release_time = 25.0       # run flow for some time before releasing tracer\n\nADprob = TracerAdvectionDiffusion.Problem(MQGprob; κ, stepper, tracer_release_time)","category":"page"},{"location":"literated/turbulent_advection-diffusion/","page":"Advection-diffusion of tracer by a turbulent flow","title":"Advection-diffusion of tracer by a turbulent flow","text":"Some shortcuts for the advection-diffusion problem:","category":"page"},{"location":"literated/turbulent_advection-diffusion/","page":"Advection-diffusion of tracer by a turbulent flow","title":"Advection-diffusion of tracer by a turbulent flow","text":"sol, clock, vars, params, grid = ADprob.sol, ADprob.clock, ADprob.vars, ADprob.params, ADprob.grid\nx, y = grid.x, grid.y","category":"page"},{"location":"literated/turbulent_advection-diffusion/#Initial-condition-for-concentration-in-both-layers","page":"Advection-diffusion of tracer by a turbulent flow","title":"Initial condition for concentration in both layers","text":"","category":"section"},{"location":"literated/turbulent_advection-diffusion/","page":"Advection-diffusion of tracer by a turbulent flow","title":"Advection-diffusion of tracer by a turbulent flow","text":"We have a two layer system so we advect-diffuse the tracer in both layers. To do this we set the initial condition for tracer concetration as a Gaussian centered at the origin.","category":"page"},{"location":"literated/turbulent_advection-diffusion/","page":"Advection-diffusion of tracer by a turbulent flow","title":"Advection-diffusion of tracer by a turbulent flow","text":"gaussian(x, y, σ) = exp(-(x^2 + y^2) / 2σ^2)\n\namplitude, spread = 10, 0.15\nc₀ = [amplitude * gaussian(x[i], y[j], spread) for j=1:grid.ny, i=1:grid.nx]\n\nTracerAdvectionDiffusion.set_c!(ADprob, c₀)","category":"page"},{"location":"literated/turbulent_advection-diffusion/#Saving-output","page":"Advection-diffusion of tracer by a turbulent flow","title":"Saving output","text":"","category":"section"},{"location":"literated/turbulent_advection-diffusion/","page":"Advection-diffusion of tracer by a turbulent flow","title":"Advection-diffusion of tracer by a turbulent flow","text":"The parent package FourierFlows.jl provides the functionality to save the output from our simulation. To do this we write a function get_concentration and pass this to the Output constructor along with the TracerAdvectionDiffusion.Problem and the name of the output file.","category":"page"},{"location":"literated/turbulent_advection-diffusion/","page":"Advection-diffusion of tracer by a turbulent flow","title":"Advection-diffusion of tracer by a turbulent flow","text":"function get_concentration(prob)\n  invtransform!(prob.vars.c, deepcopy(prob.sol), prob.params.MQGprob.params)\n\n  return prob.vars.c\nend\n\nfunction get_streamfunction(prob)\n  params, vars, grid = prob.params.MQGprob.params, prob.params.MQGprob.vars, prob.grid\n\n  @. vars.qh = prob.params.MQGprob.sol\n\n  streamfunctionfrompv!(vars.ψh, vars.qh, params, grid)\n\n  invtransform!(vars.ψ, vars.ψh, params)\n\n  return vars.ψ\nend\n\noutput = Output(ADprob, \"advection-diffusion.jld2\",\n                (:concentration, get_concentration), (:streamfunction, get_streamfunction))","category":"page"},{"location":"literated/turbulent_advection-diffusion/","page":"Advection-diffusion of tracer by a turbulent flow","title":"Advection-diffusion of tracer by a turbulent flow","text":"This saves information that we will use for plotting later on.","category":"page"},{"location":"literated/turbulent_advection-diffusion/","page":"Advection-diffusion of tracer by a turbulent flow","title":"Advection-diffusion of tracer by a turbulent flow","text":"saveproblem(output)","category":"page"},{"location":"literated/turbulent_advection-diffusion/#Step-the-problem-forward-and-save-the-output","page":"Advection-diffusion of tracer by a turbulent flow","title":"Step the problem forward and save the output","text":"","category":"section"},{"location":"literated/turbulent_advection-diffusion/","page":"Advection-diffusion of tracer by a turbulent flow","title":"Advection-diffusion of tracer by a turbulent flow","text":"We specify that we would like to save the concentration every save_frequency timesteps; then we step the problem forward.","category":"page"},{"location":"literated/turbulent_advection-diffusion/","page":"Advection-diffusion of tracer by a turbulent flow","title":"Advection-diffusion of tracer by a turbulent flow","text":"save_frequency = 50 # frequency at which output is saved\n\nstartwalltime = time()\nwhile clock.step <= nsteps\n  if clock.step % save_frequency == 0\n    saveoutput(output)\n    log = @sprintf(\"Output saved, step: %04d, t: %.2f, walltime: %.2f min\",\n                   clock.step, clock.t, (time()-startwalltime) / 60)\n\n    println(log)\n  end\n\n  stepforward!(ADprob)\n  stepforward!(params.MQGprob)\n  MultiLayerQG.updatevars!(params.MQGprob)\nend","category":"page"},{"location":"literated/turbulent_advection-diffusion/#Visualizing-the-output","page":"Advection-diffusion of tracer by a turbulent flow","title":"Visualizing the output","text":"","category":"section"},{"location":"literated/turbulent_advection-diffusion/","page":"Advection-diffusion of tracer by a turbulent flow","title":"Advection-diffusion of tracer by a turbulent flow","text":"We now have output from our simulation saved in advection-diffusion.jld2. As a demonstration, we load the JLD2 output and create a time series for the tracer in the lower layer of our fluid along with the flow streamlines.","category":"page"},{"location":"literated/turbulent_advection-diffusion/","page":"Advection-diffusion of tracer by a turbulent flow","title":"Advection-diffusion of tracer by a turbulent flow","text":"Create time series for the concentration and streamfunction in the bottom layer, layer = 2.","category":"page"},{"location":"literated/turbulent_advection-diffusion/","page":"Advection-diffusion of tracer by a turbulent flow","title":"Advection-diffusion of tracer by a turbulent flow","text":"file = jldopen(output.path)\n\niterations = parse.(Int, keys(file[\"snapshots/t\"]))\nt = [file[\"snapshots/t/$i\"] for i ∈ iterations]\n\nlayer = 2\n\nc = [file[\"snapshots/concentration/$i\"][:, :, layer] for i ∈ iterations]\nψ = [file[\"snapshots/streamfunction/$i\"][:, :, layer] for i ∈ iterations]\nnothing # hide","category":"page"},{"location":"literated/turbulent_advection-diffusion/","page":"Advection-diffusion of tracer by a turbulent flow","title":"Advection-diffusion of tracer by a turbulent flow","text":"We normalize all streamfunctions to have maximum absolute value 1.","category":"page"},{"location":"literated/turbulent_advection-diffusion/","page":"Advection-diffusion of tracer by a turbulent flow","title":"Advection-diffusion of tracer by a turbulent flow","text":"for i in 1:lastindex(ψ)\n  ψ[i] /= maximum(abs, ψ[i])\nend\n\nx,  y  = file[\"grid/x\"],  file[\"grid/y\"]\nLx, Ly = file[\"grid/Lx\"], file[\"grid/Ly\"]\n\nn = Observable(1)\n\nc_anim = @lift Array(c[$n])\nψ_anim = @lift Array(ψ[$n])\ntitle = @lift @sprintf(\"concentration, t = %.2f\", t[$n])\n\nfig = Figure(resolution = (600, 600))\nax = Axis(fig[1, 1],\n          xlabel = \"x\",\n          ylabel = \"y\",\n          aspect = 1,\n          title = title,\n          limits = ((-Lx/2, Lx/2), (-Ly/2, Ly/2)))\n\nhm = heatmap!(ax, x, y, c_anim;\n              colormap = :balance, colorrange = (-1, 1))\ncontour!(ax, x, y, ψ_anim;\n         levels = 0.1:0.2:1, color = :grey, linestyle = :solid)\ncontour!(ax, x, y, ψ_anim;\n         levels = -0.1:-0.2:-1, color = (:grey, 0.8), linestyle = :dash)\n\nnothing # hide","category":"page"},{"location":"literated/turbulent_advection-diffusion/","page":"Advection-diffusion of tracer by a turbulent flow","title":"Advection-diffusion of tracer by a turbulent flow","text":"Create a movie of the tracer with the streamlines.","category":"page"},{"location":"literated/turbulent_advection-diffusion/","page":"Advection-diffusion of tracer by a turbulent flow","title":"Advection-diffusion of tracer by a turbulent flow","text":"frames = 1:length(t)\nrecord(fig, \"turbulentflow_advection-diffusion.mp4\", frames, framerate = 12) do i\n    n[] = i\nend\n\nnothing # hide","category":"page"},{"location":"literated/turbulent_advection-diffusion/","page":"Advection-diffusion of tracer by a turbulent flow","title":"Advection-diffusion of tracer by a turbulent flow","text":"(Image: )","category":"page"},{"location":"literated/turbulent_advection-diffusion/","page":"Advection-diffusion of tracer by a turbulent flow","title":"Advection-diffusion of tracer by a turbulent flow","text":"","category":"page"},{"location":"literated/turbulent_advection-diffusion/","page":"Advection-diffusion of tracer by a turbulent flow","title":"Advection-diffusion of tracer by a turbulent flow","text":"This page was generated using Literate.jl.","category":"page"},{"location":"modules/traceradvectiondiffusion/#TracerAdvectionDiffusion-Module","page":"TracerAdvectionDiffusion Module","title":"TracerAdvectionDiffusion Module","text":"","category":"section"},{"location":"modules/traceradvectiondiffusion/#Basic-Equations","page":"TracerAdvectionDiffusion Module","title":"Basic Equations","text":"","category":"section"},{"location":"modules/traceradvectiondiffusion/","page":"TracerAdvectionDiffusion Module","title":"TracerAdvectionDiffusion Module","text":"This module solves the advection-diffusion equation for a passive tracer concentration in 1D, 2D, or 3D domains. ","category":"page"},{"location":"modules/traceradvectiondiffusion/","page":"TracerAdvectionDiffusion Module","title":"TracerAdvectionDiffusion Module","text":"For 1D problems the tracer concentration c(x t) evolves under:","category":"page"},{"location":"modules/traceradvectiondiffusion/","page":"TracerAdvectionDiffusion Module","title":"TracerAdvectionDiffusion Module","text":"partial_t c + u partial_x c = underbracekappa partial_x^2 c_textrmdiffusivity + underbracekappa_h (-1)^n_h + 1 partial_x^2 n_h c_textrmhyper-diffusivity  ","category":"page"},{"location":"modules/traceradvectiondiffusion/","page":"TracerAdvectionDiffusion Module","title":"TracerAdvectionDiffusion Module","text":"where u(x t) is the advecting flow and kappa the diffusivity, kappa_h is the hyper-diffusivity coefficient and n_h the hyper-diffusivity order.","category":"page"},{"location":"modules/traceradvectiondiffusion/","page":"TracerAdvectionDiffusion Module","title":"TracerAdvectionDiffusion Module","text":"For 2D problems, boldsymbolx = (x y), the tracer concentration c(boldsymbolx t) evolves under:","category":"page"},{"location":"modules/traceradvectiondiffusion/","page":"TracerAdvectionDiffusion Module","title":"TracerAdvectionDiffusion Module","text":"partial_t c + bmu bmcdot bmnabla c = underbracekappa partial_x^2 c + eta partial_y^2 c_textrmdiffusivity + underbracekappa_h (-1)^n_h + 1 nabla^2 n_h c_textrmhyper-diffusivity  ","category":"page"},{"location":"modules/traceradvectiondiffusion/","page":"TracerAdvectionDiffusion Module","title":"TracerAdvectionDiffusion Module","text":"where bmu = (u v) is the two-dimensional advecting flow, kappa the x-diffusivity and eta is the y-diffusivity. If eta is not defined then by default it is set to have the same value as kappa. See [TracerAdvectionDiffusion.Problem]","category":"page"},{"location":"modules/traceradvectiondiffusion/","page":"TracerAdvectionDiffusion Module","title":"TracerAdvectionDiffusion Module","text":"For 3D problems, boldsymbolx = (x y z), the tracer concentration c(boldsymbolx t) evolves via:","category":"page"},{"location":"modules/traceradvectiondiffusion/","page":"TracerAdvectionDiffusion Module","title":"TracerAdvectionDiffusion Module","text":"partial_t c + bmu bmcdot bmnabla c = underbracekappa partial_x^2 c + eta partial_y^2 c + ell partial_z^2 c_textrmdiffusivity + underbracekappa_h (-1)^n_h + 1 nabla^2 n_h c_textrmhyper-diffusivity  ","category":"page"},{"location":"modules/traceradvectiondiffusion/","page":"TracerAdvectionDiffusion Module","title":"TracerAdvectionDiffusion Module","text":"where bmu = (u v w) is the three-dimensional advecting flow, kappa the x-diffusivity, eta is the y-diffusivity, and ell the z-diffusivity. If eta or ell are not defined then by default are set to have the same value as kappa.","category":"page"},{"location":"modules/traceradvectiondiffusion/","page":"TracerAdvectionDiffusion Module","title":"TracerAdvectionDiffusion Module","text":"The advecting flow can be either compressible or incompressible. ","category":"page"},{"location":"modules/traceradvectiondiffusion/#Implementation","page":"TracerAdvectionDiffusion Module","title":"Implementation","text":"","category":"section"},{"location":"modules/traceradvectiondiffusion/","page":"TracerAdvectionDiffusion Module","title":"TracerAdvectionDiffusion Module","text":"The equations are time-stepped forward in Fourier space. For example, for 2D problems:","category":"page"},{"location":"modules/traceradvectiondiffusion/","page":"TracerAdvectionDiffusion Module","title":"TracerAdvectionDiffusion Module","text":"partial_t widehatc = - widehatbmu bmcdot bmnabla c - left ( kappa k_x^2 + eta k_y^2 + kappa_h bmk^2 n_h right) widehatc  ","category":"page"},{"location":"modules/traceradvectiondiffusion/","page":"TracerAdvectionDiffusion Module","title":"TracerAdvectionDiffusion Module","text":"where bmk = (k_x k_y).","category":"page"},{"location":"modules/traceradvectiondiffusion/","page":"TracerAdvectionDiffusion Module","title":"TracerAdvectionDiffusion Module","text":"Thus:","category":"page"},{"location":"modules/traceradvectiondiffusion/","page":"TracerAdvectionDiffusion Module","title":"TracerAdvectionDiffusion Module","text":"beginaligned\nL  = - kappa k_x^2 - eta k_y^2 - kappa_h bmk^2 n_h   \nN(widehatc) = - mathrmFFT(u partial_x c + v partial_y c)  \nendaligned","category":"page"},{"location":"literated/cellularflow/","page":"Advection-diffusion of tracer by cellular flow","title":"Advection-diffusion of tracer by cellular flow","text":"EditURL = \"../../../examples/cellularflow.jl\"","category":"page"},{"location":"literated/cellularflow/#Advection-diffusion-of-tracer-by-cellular-flow","page":"Advection-diffusion of tracer by cellular flow","title":"Advection-diffusion of tracer by cellular flow","text":"","category":"section"},{"location":"literated/cellularflow/","page":"Advection-diffusion of tracer by cellular flow","title":"Advection-diffusion of tracer by cellular flow","text":"This example can be viewed as a Jupyter notebook via (Image: ).","category":"page"},{"location":"literated/cellularflow/","page":"Advection-diffusion of tracer by cellular flow","title":"Advection-diffusion of tracer by cellular flow","text":"An example demonstrating the advection-diffusion of a tracer by a cellular flow.","category":"page"},{"location":"literated/cellularflow/#Install-dependencies","page":"Advection-diffusion of tracer by cellular flow","title":"Install dependencies","text":"","category":"section"},{"location":"literated/cellularflow/","page":"Advection-diffusion of tracer by cellular flow","title":"Advection-diffusion of tracer by cellular flow","text":"First let's make sure we have all required packages installed.","category":"page"},{"location":"literated/cellularflow/","page":"Advection-diffusion of tracer by cellular flow","title":"Advection-diffusion of tracer by cellular flow","text":"using Pkg\npkg\"add PassiveTracerFlows, CairoMakie, Printf\"","category":"page"},{"location":"literated/cellularflow/#Let's-begin","page":"Advection-diffusion of tracer by cellular flow","title":"Let's begin","text":"","category":"section"},{"location":"literated/cellularflow/","page":"Advection-diffusion of tracer by cellular flow","title":"Advection-diffusion of tracer by cellular flow","text":"Let's load PassiveTracerFlows.jl and some other needed packages.","category":"page"},{"location":"literated/cellularflow/","page":"Advection-diffusion of tracer by cellular flow","title":"Advection-diffusion of tracer by cellular flow","text":"using PassiveTracerFlows, CairoMakie, Printf","category":"page"},{"location":"literated/cellularflow/#Choosing-a-device:-CPU-or-GPU","page":"Advection-diffusion of tracer by cellular flow","title":"Choosing a device: CPU or GPU","text":"","category":"section"},{"location":"literated/cellularflow/","page":"Advection-diffusion of tracer by cellular flow","title":"Advection-diffusion of tracer by cellular flow","text":"dev = CPU()     # Device (CPU/GPU)\nnothing # hide","category":"page"},{"location":"literated/cellularflow/#Numerical-parameters-and-time-stepping-parameters","page":"Advection-diffusion of tracer by cellular flow","title":"Numerical parameters and time-stepping parameters","text":"","category":"section"},{"location":"literated/cellularflow/","page":"Advection-diffusion of tracer by cellular flow","title":"Advection-diffusion of tracer by cellular flow","text":"     nx = 128            # 2D resolution = nx²\nstepper = \"RK4\"          # timestepper\n     dt = 0.02           # timestep\n nsteps = 800            # total number of time-steps\n nsubs  = 25             # number of time-steps for intermediate logging/plotting (nsteps must be multiple of nsubs)\nnothing # hide","category":"page"},{"location":"literated/cellularflow/#Numerical-parameters-and-time-stepping-parameters-2","page":"Advection-diffusion of tracer by cellular flow","title":"Numerical parameters and time-stepping parameters","text":"","category":"section"},{"location":"literated/cellularflow/","page":"Advection-diffusion of tracer by cellular flow","title":"Advection-diffusion of tracer by cellular flow","text":"Lx = 2π       # domain size\nκ = 0.002     # diffusivity\nnothing # hide","category":"page"},{"location":"literated/cellularflow/#Set-up-cellular-flow","page":"Advection-diffusion of tracer by cellular flow","title":"Set up cellular flow","text":"","category":"section"},{"location":"literated/cellularflow/","page":"Advection-diffusion of tracer by cellular flow","title":"Advection-diffusion of tracer by cellular flow","text":"We create a two-dimensional grid to construct the cellular flow. Our cellular flow is derived from a streamfunction ψ(x y) = ψ₀ cos(x) cos(y) as (u v) = (-_y ψ _x ψ). The cellular flow is then passed into the TwoDAdvectingFlow constructor with steadyflow = true to indicate that the flow is not time dependent.","category":"page"},{"location":"literated/cellularflow/","page":"Advection-diffusion of tracer by cellular flow","title":"Advection-diffusion of tracer by cellular flow","text":"grid = TwoDGrid(dev; nx, Lx)\n\nψ₀ = 0.2\nmx, my = 1, 1\n\nψ = [ψ₀ * cos(mx * grid.x[i]) * cos(my * grid.y[j]) for i in 1:grid.nx, j in 1:grid.ny]\n\nuvel(x, y) =  ψ₀ * my * cos(mx * x) * sin(my * y)\nvvel(x, y) = -ψ₀ * mx * sin(mx * x) * cos(my * y)\nadvecting_flow = TwoDAdvectingFlow(; u = uvel, v = vvel, steadyflow = true)\nnothing # hide","category":"page"},{"location":"literated/cellularflow/#Problem-setup","page":"Advection-diffusion of tracer by cellular flow","title":"Problem setup","text":"","category":"section"},{"location":"literated/cellularflow/","page":"Advection-diffusion of tracer by cellular flow","title":"Advection-diffusion of tracer by cellular flow","text":"We initialize a Problem by providing a set of keyword arguments.","category":"page"},{"location":"literated/cellularflow/","page":"Advection-diffusion of tracer by cellular flow","title":"Advection-diffusion of tracer by cellular flow","text":"prob = TracerAdvectionDiffusion.Problem(dev, advecting_flow; nx, Lx, κ, dt, stepper)\nnothing # hide","category":"page"},{"location":"literated/cellularflow/","page":"Advection-diffusion of tracer by cellular flow","title":"Advection-diffusion of tracer by cellular flow","text":"and define some shortcuts","category":"page"},{"location":"literated/cellularflow/","page":"Advection-diffusion of tracer by cellular flow","title":"Advection-diffusion of tracer by cellular flow","text":"sol, clock, vars, params, grid = prob.sol, prob.clock, prob.vars, prob.params, prob.grid\nx, y = grid.x, grid.y\nnothing # hide","category":"page"},{"location":"literated/cellularflow/#Setting-initial-conditions","page":"Advection-diffusion of tracer by cellular flow","title":"Setting initial conditions","text":"","category":"section"},{"location":"literated/cellularflow/","page":"Advection-diffusion of tracer by cellular flow","title":"Advection-diffusion of tracer by cellular flow","text":"Our initial condition for the tracer c is a gaussian centered at (x y) = (L_x5 0).","category":"page"},{"location":"literated/cellularflow/","page":"Advection-diffusion of tracer by cellular flow","title":"Advection-diffusion of tracer by cellular flow","text":"gaussian(x, y, σ) = exp(-(x^2 + y^2) / (2σ^2))\n\namplitude, spread = 0.5, 0.15\nc₀ = [amplitude * gaussian(x[i] - 0.2 * grid.Lx, y[j], spread) for i=1:grid.nx, j=1:grid.ny]\n\nTracerAdvectionDiffusion.set_c!(prob, c₀)\nnothing # hide","category":"page"},{"location":"literated/cellularflow/#Time-stepping-the-Problem-forward","page":"Advection-diffusion of tracer by cellular flow","title":"Time-stepping the Problem forward","text":"","category":"section"},{"location":"literated/cellularflow/","page":"Advection-diffusion of tracer by cellular flow","title":"Advection-diffusion of tracer by cellular flow","text":"We want to step the Problem forward in time and, whilst doing so, we'd like to produce an animation of the tracer concentration.","category":"page"},{"location":"literated/cellularflow/","page":"Advection-diffusion of tracer by cellular flow","title":"Advection-diffusion of tracer by cellular flow","text":"First we create a figure using Observables.","category":"page"},{"location":"literated/cellularflow/","page":"Advection-diffusion of tracer by cellular flow","title":"Advection-diffusion of tracer by cellular flow","text":"c_anim = Observable(Array(vars.c))\ntitle = Observable(@sprintf(\"concentration, t = %.2f\", clock.t))\n\nLx, Ly = grid.Lx, grid.Ly\n\nfig = Figure(resolution = (600, 600))\n\nax = Axis(fig[1, 1],\n          xlabel = \"x\",\n          ylabel = \"y\",\n          aspect = 1,\n          title = title,\n          limits = ((-Lx/2, Lx/2), (-Ly/2, Ly/2)))\n\nhm = heatmap!(ax, x, y, c_anim;\n              colormap = :balance, colorrange = (-0.2, 0.2))\n\ncontour!(ax, x, y, ψ;\n         levels =  0.0125:0.025:0.2, color = :grey, linestyle = :solid)\ncontour!(ax, x, y, ψ;\n         levels = -0.1875:0.025:-0.0125, color = (:grey, 0.8), linestyle = :dash)\n\nfig","category":"page"},{"location":"literated/cellularflow/","page":"Advection-diffusion of tracer by cellular flow","title":"Advection-diffusion of tracer by cellular flow","text":"Now we time-step Problem and update the c_anim and title observables as we go to create an animation.","category":"page"},{"location":"literated/cellularflow/","page":"Advection-diffusion of tracer by cellular flow","title":"Advection-diffusion of tracer by cellular flow","text":"startwalltime = time()\n\nframes = 0:round(Int, nsteps/nsubs)\nrecord(fig, \"cellularflow_advection-diffusion.mp4\", frames, framerate = 12) do j\n   if j % (200 / nsubs) == 0\n      log = @sprintf(\"step: %04d, t: %d, walltime: %.2f min\",\n                     clock.step, clock.t, (time()-startwalltime)/60)\n\n      println(log)\n    end\n\n  c_anim[] = vars.c\n  title[] = @sprintf(\"concentration, t = %.2f\", clock.t)\n\n  stepforward!(prob, nsubs)\n  TracerAdvectionDiffusion.updatevars!(prob)\nend","category":"page"},{"location":"literated/cellularflow/","page":"Advection-diffusion of tracer by cellular flow","title":"Advection-diffusion of tracer by cellular flow","text":"(Image: )","category":"page"},{"location":"literated/cellularflow/","page":"Advection-diffusion of tracer by cellular flow","title":"Advection-diffusion of tracer by cellular flow","text":"","category":"page"},{"location":"literated/cellularflow/","page":"Advection-diffusion of tracer by cellular flow","title":"Advection-diffusion of tracer by cellular flow","text":"This page was generated using Literate.jl.","category":"page"},{"location":"literated/onedim_gaussiandiffusion/","page":"Advection-diffusion of tracer in one dimension","title":"Advection-diffusion of tracer in one dimension","text":"EditURL = \"../../../examples/onedim_gaussiandiffusion.jl\"","category":"page"},{"location":"literated/onedim_gaussiandiffusion/#Advection-diffusion-of-tracer-in-one-dimension","page":"Advection-diffusion of tracer in one dimension","title":"Advection-diffusion of tracer in one dimension","text":"","category":"section"},{"location":"literated/onedim_gaussiandiffusion/","page":"Advection-diffusion of tracer in one dimension","title":"Advection-diffusion of tracer in one dimension","text":"This is an example demonstrating the advection-diffusion of a passive tracer in one dimension.","category":"page"},{"location":"literated/onedim_gaussiandiffusion/#Install-dependencies","page":"Advection-diffusion of tracer in one dimension","title":"Install dependencies","text":"","category":"section"},{"location":"literated/onedim_gaussiandiffusion/","page":"Advection-diffusion of tracer in one dimension","title":"Advection-diffusion of tracer in one dimension","text":"First let's make sure we have all the required packages installed","category":"page"},{"location":"literated/onedim_gaussiandiffusion/","page":"Advection-diffusion of tracer in one dimension","title":"Advection-diffusion of tracer in one dimension","text":"using Pkg\npkg.add([\"PassiveTracerFlows\", \"CairoMakie\", \"JLD2\"])","category":"page"},{"location":"literated/onedim_gaussiandiffusion/#Let's-begin","page":"Advection-diffusion of tracer in one dimension","title":"Let's begin","text":"","category":"section"},{"location":"literated/onedim_gaussiandiffusion/","page":"Advection-diffusion of tracer in one dimension","title":"Advection-diffusion of tracer in one dimension","text":"First load packages needed to run this example.","category":"page"},{"location":"literated/onedim_gaussiandiffusion/","page":"Advection-diffusion of tracer in one dimension","title":"Advection-diffusion of tracer in one dimension","text":"using PassiveTracerFlows, CairoMakie, Printf, JLD2, LinearAlgebra","category":"page"},{"location":"literated/onedim_gaussiandiffusion/#Choosing-a-device:-CPU-or-GPU","page":"Advection-diffusion of tracer in one dimension","title":"Choosing a device: CPU or GPU","text":"","category":"section"},{"location":"literated/onedim_gaussiandiffusion/","page":"Advection-diffusion of tracer in one dimension","title":"Advection-diffusion of tracer in one dimension","text":"dev = CPU()     # Device (CPU/GPU)\nnothing # hide","category":"page"},{"location":"literated/onedim_gaussiandiffusion/#Numerical-parameters-and-time-stepping-parameters","page":"Advection-diffusion of tracer in one dimension","title":"Numerical parameters and time-stepping parameters","text":"","category":"section"},{"location":"literated/onedim_gaussiandiffusion/","page":"Advection-diffusion of tracer in one dimension","title":"Advection-diffusion of tracer in one dimension","text":"      n = 128            # 2D resolution = n²\nstepper = \"RK4\"          # timestepper\n     dt = 0.02           # timestep\n nsteps = 5000           # total number of time-steps\nnothing # hide","category":"page"},{"location":"literated/onedim_gaussiandiffusion/#Physical-parameters","page":"Advection-diffusion of tracer in one dimension","title":"Physical parameters","text":"","category":"section"},{"location":"literated/onedim_gaussiandiffusion/","page":"Advection-diffusion of tracer in one dimension","title":"Advection-diffusion of tracer in one dimension","text":"L = 2π       # domain size\nκ = 0.01     # diffusivity\nnothing # hide","category":"page"},{"location":"literated/onedim_gaussiandiffusion/#Flow","page":"Advection-diffusion of tracer in one dimension","title":"Flow","text":"","category":"section"},{"location":"literated/onedim_gaussiandiffusion/","page":"Advection-diffusion of tracer in one dimension","title":"Advection-diffusion of tracer in one dimension","text":"We set a constant background flow and pass this to OneDAdvectingFlow with steadyflow = true to indicate the flow is not time dependent.","category":"page"},{"location":"literated/onedim_gaussiandiffusion/","page":"Advection-diffusion of tracer in one dimension","title":"Advection-diffusion of tracer in one dimension","text":"u(x) = 0.05\nadvecting_flow = OneDAdvectingFlow(; u, steadyflow = true)","category":"page"},{"location":"literated/onedim_gaussiandiffusion/#Problem-setup","page":"Advection-diffusion of tracer in one dimension","title":"Problem setup","text":"","category":"section"},{"location":"literated/onedim_gaussiandiffusion/","page":"Advection-diffusion of tracer in one dimension","title":"Advection-diffusion of tracer in one dimension","text":"We initialize a Problem by providing a set of keyword arguments.","category":"page"},{"location":"literated/onedim_gaussiandiffusion/","page":"Advection-diffusion of tracer in one dimension","title":"Advection-diffusion of tracer in one dimension","text":"prob = TracerAdvectionDiffusion.Problem(dev, advecting_flow; nx=n, Lx=L, κ, dt, stepper)\nnothing # hide","category":"page"},{"location":"literated/onedim_gaussiandiffusion/","page":"Advection-diffusion of tracer in one dimension","title":"Advection-diffusion of tracer in one dimension","text":"and define some shortcuts.","category":"page"},{"location":"literated/onedim_gaussiandiffusion/","page":"Advection-diffusion of tracer in one dimension","title":"Advection-diffusion of tracer in one dimension","text":"sol, clock, vars, params, grid = prob.sol, prob.clock, prob.vars, prob.params, prob.grid\nx = grid.x","category":"page"},{"location":"literated/onedim_gaussiandiffusion/#Initial-condition","page":"Advection-diffusion of tracer in one dimension","title":"Initial condition","text":"","category":"section"},{"location":"literated/onedim_gaussiandiffusion/","page":"Advection-diffusion of tracer in one dimension","title":"Advection-diffusion of tracer in one dimension","text":"We advect-diffuse a concentration field that has an initial concentration set to Gaussian.","category":"page"},{"location":"literated/onedim_gaussiandiffusion/","page":"Advection-diffusion of tracer in one dimension","title":"Advection-diffusion of tracer in one dimension","text":"gaussian(x, σ) = exp(-x^2 / 2σ^2)\n\namplitude, spread = 1, 0.15\nc₀ = [amplitude * gaussian(x[i], spread) for i in 1:grid.nx]\n\nTracerAdvectionDiffusion.set_c!(prob, c₀)\nnothing #hide","category":"page"},{"location":"literated/onedim_gaussiandiffusion/#Saving-output","page":"Advection-diffusion of tracer in one dimension","title":"Saving output","text":"","category":"section"},{"location":"literated/onedim_gaussiandiffusion/","page":"Advection-diffusion of tracer in one dimension","title":"Advection-diffusion of tracer in one dimension","text":"We create the saved output using the Output function from FourierFlows.jl then save the concentration field using the get_concentration function every 50 timesteps.","category":"page"},{"location":"literated/onedim_gaussiandiffusion/","page":"Advection-diffusion of tracer in one dimension","title":"Advection-diffusion of tracer in one dimension","text":"function get_concentration(prob)\n  ldiv!(prob.vars.c, prob.grid.rfftplan, deepcopy(prob.sol))\n\n  return prob.vars.c\nend\n\noutput = Output(prob, \"advection-diffusion1D.jld2\",\n                (:concentration, get_concentration))","category":"page"},{"location":"literated/onedim_gaussiandiffusion/","page":"Advection-diffusion of tracer in one dimension","title":"Advection-diffusion of tracer in one dimension","text":"By calling saveproblem(output) we save information that we will use for plotting later on.","category":"page"},{"location":"literated/onedim_gaussiandiffusion/","page":"Advection-diffusion of tracer in one dimension","title":"Advection-diffusion of tracer in one dimension","text":"saveproblem(output)","category":"page"},{"location":"literated/onedim_gaussiandiffusion/#Stepping-the-problem-forward","page":"Advection-diffusion of tracer in one dimension","title":"Stepping the problem forward","text":"","category":"section"},{"location":"literated/onedim_gaussiandiffusion/","page":"Advection-diffusion of tracer in one dimension","title":"Advection-diffusion of tracer in one dimension","text":"Now we step the problem forward and save output every 50 timesteps.","category":"page"},{"location":"literated/onedim_gaussiandiffusion/","page":"Advection-diffusion of tracer in one dimension","title":"Advection-diffusion of tracer in one dimension","text":"save_frequency = 50 # frequency at which output is saved\n\nstartwalltime = time()\nwhile clock.step <= nsteps\n  if clock.step % save_frequency == 0\n    saveoutput(output)\n    log = @sprintf(\"Output saved, step: %04d, t: %.2f, walltime: %.2f min\",\n                   clock.step, clock.t, (time()-startwalltime) / 60)\n\n    println(log)\n  end\n\n  stepforward!(prob)\nend","category":"page"},{"location":"literated/onedim_gaussiandiffusion/#Visualising-the-output","page":"Advection-diffusion of tracer in one dimension","title":"Visualising the output","text":"","category":"section"},{"location":"literated/onedim_gaussiandiffusion/","page":"Advection-diffusion of tracer in one dimension","title":"Advection-diffusion of tracer in one dimension","text":"We load the .jld2 file and create a timeseries of the concentration field","category":"page"},{"location":"literated/onedim_gaussiandiffusion/","page":"Advection-diffusion of tracer in one dimension","title":"Advection-diffusion of tracer in one dimension","text":"file = jldopen(output.path)\n\niterations = parse.(Int, keys(file[\"snapshots/t\"]))\n\nt = [file[\"snapshots/t/$i\"] for i ∈ iterations]\nc = [file[\"snapshots/concentration/$i\"] for i ∈ iterations]\nnothing # hide","category":"page"},{"location":"literated/onedim_gaussiandiffusion/","page":"Advection-diffusion of tracer in one dimension","title":"Advection-diffusion of tracer in one dimension","text":"Set up the plotting arguments and look at the initial concentration.","category":"page"},{"location":"literated/onedim_gaussiandiffusion/","page":"Advection-diffusion of tracer in one dimension","title":"Advection-diffusion of tracer in one dimension","text":"x, Lx = file[\"grid/x\"], file[\"grid/Lx\"]\n\nn = Observable(1)\nc_anim = @lift Array(c[$n])\ntitle = @lift @sprintf(\"concentration, t = %s\", t[$n])\n\nfig = Figure(resolution = (600, 600))\nax = Axis(fig[1, 1],\n          xlabel = \"x\",\n          ylabel = \"c\",\n          limits = ((-Lx/2, Lx/2), (0, maximum(c[1]))))\n\nlines!(ax, x, c_anim; linewidth = 4)","category":"page"},{"location":"literated/onedim_gaussiandiffusion/","page":"Advection-diffusion of tracer in one dimension","title":"Advection-diffusion of tracer in one dimension","text":"Now, we create a movie of the tracer concentration being advected and diffused.","category":"page"},{"location":"literated/onedim_gaussiandiffusion/","page":"Advection-diffusion of tracer in one dimension","title":"Advection-diffusion of tracer in one dimension","text":"frames = 1:length(t)\nrecord(fig, \"1D_advection-diffusion.mp4\", frames, framerate = 18) do i\n    n[] = i\nend\n\nnothing # hide","category":"page"},{"location":"literated/onedim_gaussiandiffusion/","page":"Advection-diffusion of tracer in one dimension","title":"Advection-diffusion of tracer in one dimension","text":"(Image: )","category":"page"},{"location":"literated/onedim_gaussiandiffusion/","page":"Advection-diffusion of tracer in one dimension","title":"Advection-diffusion of tracer in one dimension","text":"","category":"page"},{"location":"literated/onedim_gaussiandiffusion/","page":"Advection-diffusion of tracer in one dimension","title":"Advection-diffusion of tracer in one dimension","text":"This page was generated using Literate.jl.","category":"page"},{"location":"#PassiveTracerFlows.jl-Documentation","page":"Home","title":"PassiveTracerFlows.jl Documentation","text":"","category":"section"},{"location":"#Overview","page":"Home","title":"Overview","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"PassiveTracerFlows.jl is a collection of modules which leverage the  FourierFlows.jl framework to solve for advection-diffusion problems on periodic domains.","category":"page"},{"location":"","page":"Home","title":"Home","text":"info: Unicode\nOftentimes unicode symbols are used in modules for certain variables or parameters. For  example, κ is commonly used to denote the diffusivity, or ∂ is used  to denote partial differentiation. Unicode symbols can be entered in the Julia REPL by  typing, e.g., \\kappa or \\partial followed by the tab key.Read more about Unicode symbols in the  Julia Documentation.","category":"page"},{"location":"#Developers","page":"Home","title":"Developers","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"PassiveTracerFlows is currently being developed by Navid C. Constantinou, Josef I. Bisits, and Gregory L. Wagner.","category":"page"},{"location":"","page":"Home","title":"Home","text":"New contributors are always welcome! We follow the ColPrac guide for collaborative practices.","category":"page"},{"location":"#Cite","page":"Home","title":"Cite","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The code is citable via zenodo, doi:10.5281/zenodo.2535983.","category":"page"},{"location":"man/types/#Private-types","page":"Private types","title":"Private types","text":"","category":"section"},{"location":"man/types/#Private-types-in-module-PassiveTracerFlows:","page":"Private types","title":"Private types in module PassiveTracerFlows:","text":"","category":"section"},{"location":"man/types/","page":"Private types","title":"Private types","text":"Modules = [PassiveTracerFlows]\nPublic = false\nOrder = [:type]","category":"page"},{"location":"man/types/#Private-types-in-module-TracerAdvectionDiffusion:","page":"Private types","title":"Private types in module TracerAdvectionDiffusion:","text":"","category":"section"},{"location":"man/types/","page":"Private types","title":"Private types","text":"Modules = [PassiveTracerFlows.TracerAdvectionDiffusion]\nPublic = false\nOrder = [:type]","category":"page"},{"location":"man/types/#PassiveTracerFlows.TracerAdvectionDiffusion.AbstractAdvectingFlow","page":"Private types","title":"PassiveTracerFlows.TracerAdvectionDiffusion.AbstractAdvectingFlow","text":"Abstract super type for an advecting flow.\n\n\n\n\n\n","category":"type"},{"location":"man/types/#PassiveTracerFlows.TracerAdvectionDiffusion.ConstDiffSteadyFlowParams1D","page":"Private types","title":"PassiveTracerFlows.TracerAdvectionDiffusion.ConstDiffSteadyFlowParams1D","text":"struct ConstDiffSteadyFlowParams1D{T} <: AbstractSteadyFlowParams\n\nThe parameters of a constant diffusivity problem with steady flow in one dimension.\n\nκ::Any: x-diffusivity coefficient\nκh::Any: isotropic hyperdiffusivity coefficient\nnκh::Int64: isotropic hyperdiffusivity order\nu::Any: x-component of advecting flow\n\n\n\n\n\n","category":"type"},{"location":"man/types/#PassiveTracerFlows.TracerAdvectionDiffusion.ConstDiffSteadyFlowParams2D","page":"Private types","title":"PassiveTracerFlows.TracerAdvectionDiffusion.ConstDiffSteadyFlowParams2D","text":"struct ConstDiffSteadyFlowParams2D{T} <: AbstractSteadyFlowParams\n\nThe parameters for a constant diffusivity problem with steady flow in two dimensions.\n\nκ::Any: x-diffusivity coefficient\nη::Any: y-diffusivity coefficient\nκh::Any: isotropic hyperdiffusivity coefficient\nnκh::Int64: isotropic hyperdiffusivity order\nu::Any: x-component of advecting flow\nv::Any: y-component of advecting flow\n\n\n\n\n\n","category":"type"},{"location":"man/types/#PassiveTracerFlows.TracerAdvectionDiffusion.ConstDiffSteadyFlowParams3D","page":"Private types","title":"PassiveTracerFlows.TracerAdvectionDiffusion.ConstDiffSteadyFlowParams3D","text":"struct ConstDiffSteadyFlowParams3D{T} <: AbstractSteadyFlowParams\n\nThe parameters for a constant diffusivity problem with steady flow in three dimensions.\n\nκ::Any: x-diffusivity coefficient\nη::Any: y-diffusivity coefficient\nι::Any: z-diffusivity coefficient\nκh::Any: isotropic hyperdiffusivity coefficient\nnκh::Int64: isotropic hyperdiffusivity order\nu::Any: x-component of advecting flow\nv::Any: y-component of advecting flow\nw::Any: z-component of advecting flow\n\n\n\n\n\n","category":"type"},{"location":"man/types/#PassiveTracerFlows.TracerAdvectionDiffusion.ConstDiffTimeVaryingFlowParams1D","page":"Private types","title":"PassiveTracerFlows.TracerAdvectionDiffusion.ConstDiffTimeVaryingFlowParams1D","text":"struct ConstDiffTimeVaryingFlowParams1D{T} <: AbstractTimeVaryingFlowParams\n\nThe parameters of a constant diffusivity problem with time-varying flow in one dimension.\n\nκ::Any: diffusivity coefficient\nκh::Any: hyperdiffusivity coefficient\nnκh::Int64: hyperdiffusivity order\nu::Function: function returning the x-component of advecting flow\n\n\n\n\n\n","category":"type"},{"location":"man/types/#PassiveTracerFlows.TracerAdvectionDiffusion.ConstDiffTimeVaryingFlowParams2D","page":"Private types","title":"PassiveTracerFlows.TracerAdvectionDiffusion.ConstDiffTimeVaryingFlowParams2D","text":"struct ConstDiffTimeVaryingFlowParams2D{T} <: AbstractTimeVaryingFlowParams\n\nThe parameters of a constant diffusivity problem with time-varying flow in two dimensions.\n\nκ::Any: x-diffusivity coefficient\nη::Any: y-diffusivity coefficient\nκh::Any: isotropic hyperdiffusivity coefficient\nnκh::Int64: isotropic hyperdiffusivity order\nu::Function: function returning the x-component of advecting flow\nv::Function: function returning the y-component of advecting flow\n\n\n\n\n\n","category":"type"},{"location":"man/types/#PassiveTracerFlows.TracerAdvectionDiffusion.ConstDiffTimeVaryingFlowParams3D","page":"Private types","title":"PassiveTracerFlows.TracerAdvectionDiffusion.ConstDiffTimeVaryingFlowParams3D","text":"struct ConstDiffTimeVaryingFlowParams3D{T} <: AbstractTimeVaryingFlowParams\n\nThe parameters of a constant diffusivity problem with time-varying flow in three dimensions.\n\nκ::Any: x-diffusivity coefficient\nη::Any: y-diffusivity coefficient\nι::Any: z-diffusivity coefficient\nκh::Any: isotropic hyperdiffusivity coefficient\nnκh::Int64: isotropic hyperdiffusivity order\nu::Function: function returning the x-component of advecting flow\nv::Function: function returning the y-component of advecting flow\nw::Function: function returning the z-component of advecting flow\n\n\n\n\n\n","category":"type"},{"location":"man/types/#PassiveTracerFlows.TracerAdvectionDiffusion.ConstDiffTurbulentFlowParams","page":"Private types","title":"PassiveTracerFlows.TracerAdvectionDiffusion.ConstDiffTurbulentFlowParams","text":"struct ConstDiffTurbulentFlowParams{T} <: AbstractTurbulentFlowParams\n\nThe parameters of a constant diffusivity problem with flow obtained from a GeophysicalFlows.MultiLayerQG problem.\n\nκ::Any: x-diffusivity coefficient\nη::Any: y-diffusivity coefficient\nκh::Any: isotropic hyperdiffusivity coefficient\nnκh::Int64: isotropic hyperdiffusivity order\nnlayers::Int64: number of layers in which the tracer is advected-diffused\ntracer_release_time::Any: flow time prior to releasing tracer\nMQGprob::FourierFlows.Problem: MultiLayerQG.Problem to generate the advecting flow\n\n\n\n\n\n","category":"type"},{"location":"man/types/#PassiveTracerFlows.TracerAdvectionDiffusion.ConstDiffTurbulentFlowParams-NTuple{4, Any}","page":"Private types","title":"PassiveTracerFlows.TracerAdvectionDiffusion.ConstDiffTurbulentFlowParams","text":"ConstDiffTurbulentFlowParams(κ, η, tracer_release_time, MQGprob)\n\nReturn the parameters params for a constant diffusivity problem with flow obtained from a GeophysicalFlows.MultiLayerQG problem.\n\n\n\n\n\n","category":"method"},{"location":"man/types/#PassiveTracerFlows.TracerAdvectionDiffusion.Vars1D","page":"Private types","title":"PassiveTracerFlows.TracerAdvectionDiffusion.Vars1D","text":"struct Vars1D{Aphys, Atrans} <: AbstractVars\n\nThe variables of a 1D TracerAdvectionDiffussion problem.\n\nc: tracer concentration\ncx: tracer concentration x-derivative, cx\nch: Fourier transform of tracer concentration\ncxh: Fourier transform of tracer concentration x-derivative, cx\n\n\n\n\n\n","category":"type"},{"location":"man/types/#PassiveTracerFlows.TracerAdvectionDiffusion.Vars2D","page":"Private types","title":"PassiveTracerFlows.TracerAdvectionDiffusion.Vars2D","text":"struct Vars2D{Aphys, Atrans} <: AbstractVars\n\nThe variables of a 2D TracerAdvectionDiffussion problem.\n\nc: tracer concentration\ncx: tracer concentration x-derivative, cx\ncy: tracer concentration y-derivative, cy\nch: Fourier transform of tracer concentration\ncxh: Fourier transform of tracer concentration x-derivative, cx\ncyh: Fourier transform of tracer concentration y-derivative, cy\n\n\n\n\n\n","category":"type"},{"location":"man/types/#PassiveTracerFlows.TracerAdvectionDiffusion.Vars3D","page":"Private types","title":"PassiveTracerFlows.TracerAdvectionDiffusion.Vars3D","text":"struct Vars3D{Aphys, Atrans} <: AbstractVars\n\nThe variables of a 3D TracerAdvectionDiffussion problem.\n\nc: tracer concentration\ncx: tracer concentration x-derivative, cx\ncy: tracer concentration y-derivative, cy\ncz: tracer concentration z-derivative, cz\nch: Fourier transform of tracer concentration\ncxh: Fourier transform of tracer concentration x-derivative, cx\ncyh: Fourier transform of tracer concentration y-derivative, cy\nczh: Fourier transform of tracer concentration z-derivative, cz\n\n\n\n\n\n","category":"type"},{"location":"man/functions/#Functions","page":"Functions","title":"Functions","text":"","category":"section"},{"location":"man/functions/#Functions-exported-from-PassiveTracerFlows:","page":"Functions","title":"Functions exported from PassiveTracerFlows:","text":"","category":"section"},{"location":"man/functions/","page":"Functions","title":"Functions","text":"Modules = [PassiveTracerFlows]\nPrivate = false\nOrder = [:function]","category":"page"},{"location":"man/functions/#Functions-exported-from-TracerAdvectionDiffusion:","page":"Functions","title":"Functions exported from TracerAdvectionDiffusion:","text":"","category":"section"},{"location":"man/functions/","page":"Functions","title":"Functions","text":"Modules = [PassiveTracerFlows.TracerAdvectionDiffusion]\nPrivate = false\nOrder = [:function]","category":"page"},{"location":"man/functions/#PassiveTracerFlows.TracerAdvectionDiffusion.Problem-Tuple{Device, OneDAdvectingFlow}","page":"Functions","title":"PassiveTracerFlows.TracerAdvectionDiffusion.Problem","text":"Problem(dev::Device=CPU(), advecting_flow; parameters...)\n\nConstruct a constant diffusivity problem with steady or time-varying advecting_flow on device dev. The default device is the CPU(), to use the GPU pass the argument to the function The dimensionality of the problem is inferred from the type of advecting_flow provided:\n\nadvecting_flow::OneDAdvectingFlow for 1D advection-diffusion problem,\nadvecting_flow::TwoDAdvectingFlow for 2D advection-diffusion problem,\nadvecting_flow::ThreeDAdvectingFlow for 3D advection-diffusion problem.\n\n\n\n\n\n","category":"method"},{"location":"man/functions/#PassiveTracerFlows.TracerAdvectionDiffusion.Problem-Tuple{FourierFlows.Problem}","page":"Functions","title":"PassiveTracerFlows.TracerAdvectionDiffusion.Problem","text":"Problem(dev::Device=CPU(), MQGprob::FourierFlows.Problem; parameters...)\n\nConstruct a constant diffusivity problem on device dev using the flow from a GeophysicalFlows.MultiLayerQG problem as the advecting flow. The device CPU() is set as the default device.\n\n\n\n\n\n","category":"method"},{"location":"man/functions/#PassiveTracerFlows.TracerAdvectionDiffusion.set_c!-Tuple{Any, PassiveTracerFlows.TracerAdvectionDiffusion.AbstractTurbulentFlowParams, Any, Any, Any}","page":"Functions","title":"PassiveTracerFlows.TracerAdvectionDiffusion.set_c!","text":"set_c!(sol, params::AbstractTurbulentFlowParams, grid, c)\n\nSet the initial condition for tracer concentration in all layers of a TracerAdvectionDiffusion.Problem that uses a MultiLayerQG flow to  advect the tracer.\n\n\n\n\n\n","category":"method"},{"location":"man/functions/#PassiveTracerFlows.TracerAdvectionDiffusion.set_c!-Tuple{Any, Union{PassiveTracerFlows.TracerAdvectionDiffusion.AbstractSteadyFlowParams, PassiveTracerFlows.TracerAdvectionDiffusion.AbstractTimeVaryingFlowParams}, Any, Any, Any}","page":"Functions","title":"PassiveTracerFlows.TracerAdvectionDiffusion.set_c!","text":"set_c!(sol, params::Union{AbstractTimeVaryingFlowParams, AbstractSteadyFlowParams}, grid, c)\n\nSet the solution sol as the transform of c and update variables vars.\n\n\n\n\n\n","category":"method"},{"location":"man/functions/#PassiveTracerFlows.TracerAdvectionDiffusion.updatevars!-NTuple{4, Any}","page":"Functions","title":"PassiveTracerFlows.TracerAdvectionDiffusion.updatevars!","text":"updatevars!(prob)\n\nUpdate the prob.vars in problem prob using the solution prob.sol.\n\n\n\n\n\n","category":"method"},{"location":"man/functions/#PassiveTracerFlows.TracerAdvectionDiffusion.updatevars!-Tuple{PassiveTracerFlows.TracerAdvectionDiffusion.AbstractTurbulentFlowParams, Any, Any, Any}","page":"Functions","title":"PassiveTracerFlows.TracerAdvectionDiffusion.updatevars!","text":"updatevars!(params::AbstractTurbulentFlowParams, vars, grid, sol)\n\nUpdate the vars on the grid with the solution in sol for a problem prob that is being advected by a turbulent flow.     \n\n\n\n\n\n","category":"method"}]
}
