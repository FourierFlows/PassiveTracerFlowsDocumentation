var documenterSearchIndex = {"docs":
[{"location":"modules/traceradvdiff/#TracerAdvDiff-Module","page":"TracerAdvDiff Module","title":"TracerAdvDiff Module","text":"","category":"section"},{"location":"modules/traceradvdiff/#Basic-Equations","page":"TracerAdvDiff Module","title":"Basic Equations","text":"","category":"section"},{"location":"modules/traceradvdiff/","page":"TracerAdvDiff Module","title":"TracerAdvDiff Module","text":"This module solves the advection diffusion equation for a passive tracer concentration c(x y t) in two-dimensions:","category":"page"},{"location":"modules/traceradvdiff/","page":"TracerAdvDiff Module","title":"TracerAdvDiff Module","text":"partial_t c + boldsymbolu boldsymbolcdot boldsymbolnabla c = underbraceeta partial_x^2 c + kappa partial_y^2 c_textrmdiffusivity + underbracekappa_h (-1)^n_h nabla^2n_hc_textrmhyper-diffusivity ","category":"page"},{"location":"modules/traceradvdiff/","page":"TracerAdvDiff Module","title":"TracerAdvDiff Module","text":"where boldsymbolu = (uv) is the two-dimensional advecting flow, eta the x-diffusivity and kappa is the y-diffusivity. If eta is not defined then the code uses isotropic diffusivity, i.e., eta partial_x^2 c + kappa partial_y^2 cmapstokappanabla^2. The advecting flow could be either compressible or incompressible. ","category":"page"},{"location":"modules/traceradvdiff/#Implementation","page":"TracerAdvDiff Module","title":"Implementation","text":"","category":"section"},{"location":"modules/traceradvdiff/","page":"TracerAdvDiff Module","title":"TracerAdvDiff Module","text":"The equation is time-stepped forward in Fourier space:","category":"page"},{"location":"modules/traceradvdiff/","page":"TracerAdvDiff Module","title":"TracerAdvDiff Module","text":"partial_t widehatc = - widehatboldsymbolu boldsymbolcdot boldsymbolnabla c - left (eta k_x^2 + kappa k_y^2) +kappa_h k^2nu_h rightwidehatc ","category":"page"},{"location":"modules/traceradvdiff/","page":"TracerAdvDiff Module","title":"TracerAdvDiff Module","text":"Thus:","category":"page"},{"location":"modules/traceradvdiff/","page":"TracerAdvDiff Module","title":"TracerAdvDiff Module","text":"beginalign*\nmathcalL = -eta k_x^2 - kappa k_y^2 - kappa_h k^2nu_h  \nmathcalN(widehatc) = - mathrmFFT(u partial_x c + upsilon partial_y c) \nendalign*","category":"page"},{"location":"#PassiveTracerFlows.jl-Documentation","page":"Home","title":"PassiveTracerFlows.jl Documentation","text":"","category":"section"},{"location":"#Overview","page":"Home","title":"Overview","text":"","category":"section"},{"location":"#Developers","page":"Home","title":"Developers","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"PassiveTracerFlows is currently being developed by Navid C. Constantinou and Gregory L. Wagner.","category":"page"},{"location":"#Cite","page":"Home","title":"Cite","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The code is citable via zenodo. Please cite as:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Navid C. Constantinou. and Gregory L. Wagner (2020). FourierFlows/PassiveTracerFlows.jl. Zenodo.  https://doi.org/10.5281/zenodo.2535983","category":"page"},{"location":"man/types/#Private-types","page":"Private types","title":"Private types","text":"","category":"section"},{"location":"man/types/#Private-types-in-module-PassiveTracerFlows:","page":"Private types","title":"Private types in module PassiveTracerFlows:","text":"","category":"section"},{"location":"man/types/","page":"Private types","title":"Private types","text":"Modules = [PassiveTracerFlows]\nPublic = false\nOrder = [:type]","category":"page"},{"location":"man/types/#Private-types-in-module-PassiveTracerFlows:-2","page":"Private types","title":"Private types in module PassiveTracerFlows:","text":"","category":"section"},{"location":"man/types/","page":"Private types","title":"Private types","text":"Modules = [PassiveTracerFlows.TracerAdvDiff]\nPublic = false\nOrder = [:type]","category":"page"},{"location":"man/types/#PassiveTracerFlows.TracerAdvDiff.ConstDiffParams","page":"Private types","title":"PassiveTracerFlows.TracerAdvDiff.ConstDiffParams","text":"ConstDiffParams(eta, kap, kaph, nkaph, u, v)\nConstDiffParams(eta, kap, u, v)\n\nReturns the params for constant diffusivity problem with time-varying flow.\n\n\n\n\n\n","category":"type"},{"location":"man/types/#PassiveTracerFlows.TracerAdvDiff.ConstDiffSteadyFlowParams","page":"Private types","title":"PassiveTracerFlows.TracerAdvDiff.ConstDiffSteadyFlowParams","text":"ConstDiffSteadyFlowParams(eta, kap, kaph, nkaph, u, v, g)\nConstDiffSteadyFlowParams(eta, kap, u, v, g)\n\nReturns the params for constant diffusivity problem with time-steady flow.\n\n\n\n\n\n","category":"type"},{"location":"man/types/#PassiveTracerFlows.TracerAdvDiff.Vars-Union{Tuple{T}, Tuple{Dev}, Tuple{Dev,FourierFlows.AbstractGrid{T,A} where A}} where T where Dev","page":"Private types","title":"PassiveTracerFlows.TracerAdvDiff.Vars","text":"Vars(g)\n\nReturns the vars for constant diffusivity problem on grid g.\n\n\n\n\n\n","category":"method"},{"location":"man/functions/#Functions","page":"Functions","title":"Functions","text":"","category":"section"},{"location":"man/functions/#Functions-exported-from-PassiveTracerFlows:","page":"Functions","title":"Functions exported from PassiveTracerFlows:","text":"","category":"section"},{"location":"man/functions/","page":"Functions","title":"Functions","text":"Modules = [PassiveTracerFlows]\nPrivate = false\nOrder = [:function]","category":"page"},{"location":"man/functions/#Functions-exported-from-TracerAdvDiff:","page":"Functions","title":"Functions exported from TracerAdvDiff:","text":"","category":"section"},{"location":"man/functions/","page":"Functions","title":"Functions","text":"Modules = [PassiveTracerFlows.TracerAdvDiff]\nPrivate = false\nOrder = [:function]","category":"page"},{"location":"man/functions/#PassiveTracerFlows.TracerAdvDiff.set_c!-Tuple{Any,Any}","page":"Functions","title":"PassiveTracerFlows.TracerAdvDiff.set_c!","text":"set_c!(prob, c)\n\nSet the solution sol as the transform of c and update variables v on the grid g.\n\n\n\n\n\n","category":"method"},{"location":"man/functions/#PassiveTracerFlows.TracerAdvDiff.updatevars!-Tuple{Any}","page":"Functions","title":"PassiveTracerFlows.TracerAdvDiff.updatevars!","text":"updatevars!(prob)\n\nUpdate the vars in v on the grid g with the solution in sol.\n\n\n\n\n\n","category":"method"}]
}
